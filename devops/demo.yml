AWSTemplateFormatVersion: 2010-09-09
Description:  This template deploys a VPC in either us-east1 or us-west-2, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets, a Linux t2.micro Instance with Security Group with open HTTP access. 
    
# Mappings:
#   RegionMap:
#     us-east-1:
#      "AMI": "ami-007855ac798b5175e"
#     us-west-2:
#      "AMI": "ami-0fcf52bcf5db7b003"
Parameters:
  Ec2InstanceKeyName:
    Description: EC2 SSH KEY
    Type: String
    Default: naveen-key
    ConstraintDescription: Must be a you have Key

  EC2AMI:
    Description: AMI ID
    Type: String
    Default: ami-053b0d53c279acc90
    ConstraintDescription: Must be a you have AMI 


  EC2InstanceType:
    Description: Instance type
    Type: String
    Default: t2.micro
  
  Project:
    Description: Project environment
    Type: String
    Default: "DEV"
    AllowedValues:
      - DEV
      - TEST
      - STAGE
      - PROD
  vpccidr:
    Description: cidr for vpc
    Type: String
    Default: 10.0.0.0/16
  pubsn1cidr:
    Description: cidr for pubsn1
    Type: String
    Default: 10.0.1.0/24
  pubsn2cidr:
    Description: cidr for pubsn2
    Type: String
    Default: 10.0.2.0/24
  privatesn1cidr:
    Description: cidr for privatesn1
    Type: String
    Default: 10.0.11.0/24
  privatesn2cidr:
    Description: cidr for privatesn2
    Type: String
    Default: 10.0.12.0/24
  EC2TagName:
    Description: project Name
    Type: String
    Default: "TEST"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpccidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: vpc-1

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IG-1

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref pubsn1cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-AZ1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref pubsn2cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-AZ2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref privatesn1cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet-AZ1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref privatesn2cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet-AZ2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
      
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC 


  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: MySystemsManagerRole
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref Ec2InstanceKeyName
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      Tags:
       - Key: Name
         Value: !Sub ${Project}-${EC2TagName}-ec24

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: MySystemsManagerRole
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref Ec2InstanceKeyName
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      Tags:
       - Key: Name
         Value: !Sub ${Project}-${EC2TagName}-ec24

  ResourceGroup:
    Type: "AWS::ResourceGroups::Group"
    Properties:
      Name: !Sub ${Project}-${EC2TagName}-RG
      Description: "Resource group to add ec2"
      ResourceQuery:
        Type: 
          "TAG_FILTERS_1_0"
        Query:
          ResourceTypeFilters:
            - "AWS::EC2::Instance"
          TagFilters:
            -
              Key: Name
              Values:
                - !Sub ${Project}-${EC2TagName}-ec24
  
